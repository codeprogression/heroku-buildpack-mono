#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

DEPENDENCY_S3_BUCKET_PATH=${DEPENDENCY_S3_BUCKET_PATH:-"https://s3.amazonaws.com/nancy-buildpack-mono"}
MONO_VERSION=${MONO_VERSION:-"3.12.1"}

BUILD_DIR=$1
CACHE_DIR=$2

echo "BUILD_DIR: ${BUILD_DIR}"
echo "CACHE_DIR: ${CACHE_DIR}"

rm -rf ${BUILD_DIR}/publish

function conditional_download() {
  DOWNLOAD_URL="$1"
  DESTINATION="$2"
  FRIENDLY_NAME="$3"

  if [ ! -d ${DESTINATION} ]; then
    rm -rf ${DESTINATION}
    mkdir -p ${DESTINATION}
    echo "       Downloading ${FRIENDLY_NAME} (at ${DOWNLOAD_URL})"
    curl -L ${DOWNLOAD_URL} -s | tar xz -C ${DESTINATION}
  else
    echo "       Using cached copy of ${FRIENDLY_NAME}"
  fi
}


LP_DIR=`cd $(dirname $0); cd ..; pwd`

cd ${BUILD_DIR}
rm -rf ${CACHE_DIR}/build
mkdir -p ${CACHE_DIR}/build
cp -R . ${CACHE_DIR}/build

echo "-----> Finding solution"
# find a solution file
SLN=$(find ${CACHE_DIR}/build -maxdepth 2 -iname "*.sln")
if [ $( echo "${SLN}" | wc -l ) -gt 1 ]; then
  echo "       Too many *.sln files"
  exit 1
fi

if [ "${SLN}" == "" ]; then
  echo "       No *.sln file found"
  exit 1
fi

echo "-----> Retrieving dependencies"

NUGET_CACHE_LOCATION="${CACHE_DIR}/nuget"
MONO_CACHE_LOCATION="${CACHE_DIR}/mono-${MONO_VERSION}"
conditional_download ${DEPENDENCY_S3_BUCKET_PATH}/mono-${MONO_VERSION}.tar.gz ${MONO_CACHE_LOCATION} "mono-${MONO_VERSION}"

if [ ! -f "${NUGET_CACHE_LOCATION}/NuGet.exe" ]; then
  echo "       Downloading NuGet"
  rm -rf ${NUGET_CACHE_LOCATION}
  mkdir -p ${NUGET_CACHE_LOCATION}
  NUGET_EXE="https://nuget.org/nuget.exe"
  curl -L ${NUGET_EXE} -s -o "${NUGET_CACHE_LOCATION}/NuGet.exe"
  chmod a+x "${NUGET_CACHE_LOCATION}/NuGet.exe"
else
  echo "       Using cached copy of NuGet"
fi

echo "-----> Preparing mono"

echo "       Copying mono to build directory (${MONO_CACHE_LOCATION}/mono)"

cp -R "${MONO_CACHE_LOCATION}/mono" .
# TODO: this is done because `ln -s` causes nuget to fail in subtle ways. Fix please
# ln -s "$BUILD_DIR/mono" /app
cp -R "${MONO_CACHE_LOCATION}/mono" /app

echo "       Preparing build paths"
export PATH="/app/mono/bin:${PATH}"
export LD_LIBRARY_PATH="/app/mono/lib:${LD_LIBRARY_PATH}"

echo "       Enable mono execution"
chmod +x mono

echo "-----> Starting NuGet package restore"

echo "       Adding certs to trusted store"
cp -r ${LP_DIR}/.config ~/.
cp -r ${LP_DIR}/.config ${BUILD_DIR}/.
cp -r ${LP_DIR}/.config ${CACHE_DIR}/build/.

rm -rf ${NUGET_CACHE_LOCATION}/nuget

echo "       Generating NuGet script"
echo "#!/bin/bash" >> "${NUGET_CACHE_LOCATION}/nuget"
echo "mozroots --import --sync" >> "${NUGET_CACHE_LOCATION}/nuget"
echo "mono --runtime=v4.0.30319 ${NUGET_CACHE_LOCATION}/NuGet.exe update -self" >> "${NUGET_CACHE_LOCATION}/nuget"
echo "mono --runtime=v4.0.30319 \"${NUGET_CACHE_LOCATION}/NuGet.exe\" \"\$@\"" >> "${NUGET_CACHE_LOCATION}/nuget"
chmod a+x ${NUGET_CACHE_LOCATION}/nuget

echo "       Restoring NuGet packages"
${NUGET_CACHE_LOCATION}/nuget restore ${SLN}

echo "-----> Building application"
xbuild /property:Configuration=Release /t:Rebuild ${SLN}

echo "-----> Moving to publish directory"
mkdir -p ${BUILD_DIR}/publish
cd ${CACHE_DIR}/build
mv -f ${BUILD_DIR}/mono ${BUILD_DIR}/.mono
mv -f ${BUILD_DIR}/Procfile ${BUILD_DIR}/.Procfile
cp -R . ${BUILD_DIR}/.publish

echo "-----> Cleaning up"
rm -rf ${BUILD_DIR}/*
mv -f ${BUILD_DIR}/.mono ${BUILD_DIR}/mono
mv -f ${BUILD_DIR}/.Procfile ${BUILD_DIR}/Procfile
mv -f ${BUILD_DIR}/.publish ${BUILD_DIR}/publish

echo "-----> Build SUCCESS"
